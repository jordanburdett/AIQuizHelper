import { Question, QuizAttempt } from '@shared/types/Quiz';
import { StudyRecommendation } from '@shared/types/User';
import { LLMProvider } from '@shared/interfaces/LLMProvider';
import { generateQuestionId } from '../utils/idGenerator';
import { LLMPromptHandler } from './LLMPromptHandler';

export class MockLLMService implements LLMProvider {
  async generateQuizQuestions(topic: string, count: number = 5, _effort?: 'speed' | 'balanced' | 'quality', _factCheckingContext?: string): Promise<Question[]> {
    // Mock implementation for testing/development
    const questions: Question[] = [];
    const possibleAnswers = ['a', 'b', 'c', 'd'];
    
    for (let i = 1; i <= count; i++) {
      // Randomize the correct answer for each question
      const randomCorrectAnswer = possibleAnswers[Math.floor(Math.random() * possibleAnswers.length)];
      
      questions.push({
        id: generateQuestionId(),
        question: `Mock question ${i} about ${topic}?`,
        options: [
          { id: 'a', text: 'First option', value: 'a' },
          { id: 'b', text: 'Second option', value: 'b' },
          { id: 'c', text: 'Third option', value: 'c' },
          { id: 'd', text: 'Fourth option', value: 'd' }
        ],
        correctAnswer: randomCorrectAnswer
      });
    }

    return questions;
  }

  async generateStudyRecommendations(quizAttempt: QuizAttempt, topic: string): Promise<StudyRecommendation[]> {
    // Mock implementation for testing/development
    const score = quizAttempt.score;
    
    const recommendations: StudyRecommendation[] = [
      {
        topic: `Advanced ${topic} Concepts`,
        reason: `Based on your ${score}% score, you could benefit from deeper understanding of core principles`,
        resources: [
          'Review fundamental concepts and definitions',
          'Practice with additional exercises',
          'Explore real-world applications'
        ],
        priority: score < 70 ? 'high' : score < 85 ? 'medium' : 'low'
      },
      {
        topic: `${topic} Problem Solving`,
        reason: 'Strengthen analytical skills in this subject area',
        resources: [
          'Work through step-by-step examples',
          'Join study groups or forums',
          'Take practice quizzes'
        ],
        priority: 'medium'
      }
    ];

    return recommendations;
  }

  async generateSearchQueries(topic: string): Promise<string[]> {
    // Mock implementation for testing/development
    // Generate simple search terms based on the topic
    const baseTerms = topic.toLowerCase().split(' ').filter(term => term.length > 2);
    const searchTerms = [topic, ...baseTerms.slice(0, 2)].slice(0, 3);
    
    return searchTerms;
  }

  async generateQuestionExplanation(question: Question, topic: string): Promise<string> {
    // For mock service, we still generate the prompt to ensure consistency
    // but return a simplified mock response instead of calling an AI service
    LLMPromptHandler.buildQuestionExplanationPrompt(question, topic);
    const correctOption = question.options.find(opt => opt.value === question.correctAnswer);
    
    return `## Correct Answer: ${question.correctAnswer.toUpperCase()}

${correctOption?.text || 'Unknown'} is the correct answer.

## Why Other Options Are Incorrect:

${question.options
  .filter(opt => opt.value !== question.correctAnswer)
  .map(opt => `- **${opt.value.toUpperCase()}**: This is not the correct answer`)
  .join('\n')}

## Key Concepts:

- This is a mock explanation for ${topic}
- In production, this would be generated by an AI model

*Note: This is a mock response for development/testing purposes.*`;
  }
}