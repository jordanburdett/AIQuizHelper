import { Question, QuizAttempt } from '@shared/types/Quiz';
import { StudyRecommendation } from '@shared/types/User';
import { LLMProvider } from '@shared/interfaces/LLMProvider';
import { generateQuestionId } from '../utils/idGenerator';

export class MockLLMService implements LLMProvider {
  async generateQuizQuestions(topic: string, count: number = 5, _effort?: 'speed' | 'balanced' | 'quality', _factCheckingContext?: string): Promise<Question[]> {
    // Mock implementation for testing/development
    const questions: Question[] = [];
    const possibleAnswers = ['a', 'b', 'c', 'd'];
    
    for (let i = 1; i <= count; i++) {
      // Randomize the correct answer for each question
      const randomCorrectAnswer = possibleAnswers[Math.floor(Math.random() * possibleAnswers.length)];
      
      questions.push({
        id: generateQuestionId(),
        question: `Mock question ${i} about ${topic}?`,
        options: [
          { id: 'a', text: 'First option', value: 'a' },
          { id: 'b', text: 'Second option', value: 'b' },
          { id: 'c', text: 'Third option', value: 'c' },
          { id: 'd', text: 'Fourth option', value: 'd' }
        ],
        correctAnswer: randomCorrectAnswer
      });
    }

    return questions;
  }

  async generateStudyRecommendations(quizAttempt: QuizAttempt, topic: string): Promise<StudyRecommendation[]> {
    // Mock implementation for testing/development
    const score = quizAttempt.score;
    
    const recommendations: StudyRecommendation[] = [
      {
        topic: `Advanced ${topic} Concepts`,
        reason: `Based on your ${score}% score, you could benefit from deeper understanding of core principles`,
        resources: [
          'Review fundamental concepts and definitions',
          'Practice with additional exercises',
          'Explore real-world applications'
        ],
        priority: score < 70 ? 'high' : score < 85 ? 'medium' : 'low'
      },
      {
        topic: `${topic} Problem Solving`,
        reason: 'Strengthen analytical skills in this subject area',
        resources: [
          'Work through step-by-step examples',
          'Join study groups or forums',
          'Take practice quizzes'
        ],
        priority: 'medium'
      }
    ];

    return recommendations;
  }

  async generateQuestionExplanation(question: Question, topic: string): Promise<string> {
    // Mock implementation for testing/development
    const correctOption = question.options.find(opt => opt.value === question.correctAnswer);
    
    return `This is a mock explanation for the question about ${topic}.

The correct answer is ${question.correctAnswer.toUpperCase()}: ${correctOption?.text || 'Unknown'}.

This mock explanation would normally provide detailed reasoning about why this answer is correct and why the other options are incorrect. In a real implementation, this would be generated by an AI model based on the specific question content and subject matter.`;
  }
}